$date
	Thu Sep 15 00:40:54 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$scope module die $end
$var wire 8 ! mem_addr [7:0] $end
$var wire 1 " mrd $end
$var wire 1 # mwr $end
$var wire 8 $ mem_data [7:0] $end
$var wire 1 % clk $end
$scope module core1 $end
$var wire 8 & mem_addr [7:0] $end
$var wire 1 " mrd $end
$var wire 1 # mwr $end
$var wire 33 ' uop [32:0] $end
$var wire 1 ( uc_eos $end
$var wire 8 ) mem_data [7:0] $end
$var wire 1 % clk $end
$var reg 6 * uc_opcode [5:0] $end
$var reg 1 + uc_sos $end
$scope module l1_dcache $end
$var wire 1 , next $end
$upscope $end
$scope module l1_icache $end
$var wire 1 - next $end
$upscope $end
$scope module registers $end
$var wire 1 % next $end
$upscope $end
$scope module stage1_prefetch $end
$var wire 1 % next $end
$upscope $end
$scope module stage2_predecode $end
$var wire 1 % next $end
$upscope $end
$scope module stage3_microcode $end
$var wire 6 . opcode [5:0] $end
$var wire 1 + sos $end
$var wire 1 ( eos $end
$var wire 1 % clk $end
$var reg 8 / code_ip [7:0] $end
$var reg 33 0 ctrl [32:0] $end
$var reg 1 1 flag_jmp $end
$var reg 8 2 flag_jmp_addr [7:0] $end
$var reg 32 3 func_fmt [31:0] $end
$var reg 2 4 instruction_type [1:0] $end
$var reg 1 5 microunit_init $end
$var reg 1 6 microunit_running $end
$var reg 8 7 stack_ptr [7:0] $end
$var reg 1 8 zero $end
$var integer 32 9 i [31:0] $end
$var integer 32 : int_segment_counter [31:0] $end
$var integer 32 ; microinstr_ctr [31:0] $end
$var integer 32 < segment_counter [31:0] $end
$scope task check_microcode_running $end
$upscope $end
$scope task exec_microinstruction $end
$var reg 8 = address [7:0] $end
$upscope $end
$scope task microinstr $end
$var reg 32 > control [31:0] $end
$var reg 32 ? func [31:0] $end
$var reg 2 @ seg_type [1:0] $end
$var integer 32 A is_eos [31:0] $end
$var integer 32 B is_sos [31:0] $end
$upscope $end
$scope task pop_stack $end
$upscope $end
$scope task push_stack $end
$var reg 8 C address [7:0] $end
$upscope $end
$scope task schedule_jmp $end
$var reg 8 D new_addr [7:0] $end
$upscope $end
$upscope $end
$scope module stage6_execute $end
$var wire 1 % next $end
$scope module integer_unit $end
$var wire 1 % next $end
$upscope $end
$upscope $end
$scope module stage7_memory_access $end
$var wire 1 % next $end
$upscope $end
$upscope $end
$scope module l2_cache $end
$var wire 1 % next $end
$upscope $end
$scope module uncore $end
$var reg 1 % clk $end
$scope module l3_cache $end
$var wire 1 % next $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module top_tb $end
$scope module mem $end
$var wire 1 % clk $end
$var wire 8 E mem_addr [7:0] $end
$var wire 1 " mrd $end
$var wire 1 # mwr $end
$var wire 8 F mem_data [7:0] $end
$var reg 1 G oe $end
$scope begin $unm_blk_30 $end
$var integer 32 H i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 H
0G
bz F
bz E
bx D
bx C
b1 B
b1 A
b0 @
b0 ?
b1001010 >
bx =
b10 <
b1000 ;
b11 :
b11001000 9
08
b0 7
16
05
b0 4
b0 3
b11111111 2
01
b0 0
b0 /
b0 .
z-
z,
0+
b0 *
bz )
0(
b0 '
bz &
0%
bz $
z#
z"
bz !
$end
#1
1%
#2
0%
#3
1%
#4
0%
#5
1%
#6
0%
#7
1%
#8
0%
#9
1%
#10
0%
#11
1%
#12
0%
#13
1%
#14
0%
#15
1%
#16
0%
#17
1%
#18
0%
#19
1%
#20
0%
