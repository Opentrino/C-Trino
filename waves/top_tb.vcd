$date
	Sat Aug 13 13:30:11 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 8 " mem_addr [7:0] $end
$var wire 1 # mrd $end
$var wire 1 $ mwr $end
$var wire 8 % mem_data [7:0] $end
$scope module l2_cache $end
$upscope $end
$scope module score $end
$var wire 1 ! clk $end
$var wire 8 & mem_addr [7:0] $end
$var wire 1 # mrd $end
$var wire 1 $ mwr $end
$var wire 33 ' uop [32:0] $end
$var wire 1 ( uc_eos $end
$var wire 8 ) mem_data [7:0] $end
$var reg 6 * uc_opcode [5:0] $end
$var reg 1 + uc_sos $end
$scope module l1_dcache $end
$upscope $end
$scope module l1_icache $end
$upscope $end
$scope module s_fetch $end
$upscope $end
$scope module ucode $end
$var wire 1 ! clk $end
$var wire 6 , opcode [5:0] $end
$var wire 1 + sos $end
$var wire 1 ( eos $end
$var reg 8 - code_ip [7:0] $end
$var reg 33 . ctrl [32:0] $end
$var reg 1 / flag_jmp $end
$var reg 8 0 flag_jmp_addr [7:0] $end
$var reg 32 1 func_fmt [31:0] $end
$var reg 2 2 instruction_type [1:0] $end
$var reg 1 3 microunit_init $end
$var reg 1 4 microunit_running $end
$var reg 8 5 stack_ptr [7:0] $end
$var reg 1 6 zero $end
$var integer 32 7 i [31:0] $end
$var integer 32 8 int_segment_counter [31:0] $end
$var integer 32 9 microinstr_ctr [31:0] $end
$var integer 32 : segment_counter [31:0] $end
$scope task check_microcode_running $end
$upscope $end
$scope task exec_microinstruction $end
$var reg 8 ; address [7:0] $end
$upscope $end
$scope task microinstr $end
$var reg 32 < control [31:0] $end
$var reg 32 = func [31:0] $end
$var reg 2 > seg_type [1:0] $end
$var integer 32 ? is_eos [31:0] $end
$var integer 32 @ is_sos [31:0] $end
$upscope $end
$scope task pop_stack $end
$upscope $end
$scope task push_stack $end
$var reg 8 A address [7:0] $end
$upscope $end
$scope task schedule_jmp $end
$var reg 8 B new_addr [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module top_tb $end
$scope module mem $end
$var wire 1 ! clk $end
$var wire 8 C mem_addr [7:0] $end
$var wire 1 # mrd $end
$var wire 1 $ mwr $end
$var wire 8 D mem_data [7:0] $end
$var reg 1 E oe $end
$scope begin $unm_blk_27 $end
$var integer 32 F i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 F
0E
bz D
bz C
bx B
bx A
b1 @
b1 ?
b0 >
b0 =
b1001010 <
bx ;
b10 :
b1000 9
b11 8
b11001000 7
06
b0 5
14
03
b0 2
b0 1
b11111111 0
0/
b0 .
b0 -
b0 ,
0+
b0 *
bz )
0(
b0 '
bz &
bz %
z$
z#
bz "
0!
$end
#1
1!
#2
0!
#3
1!
#4
0!
#5
1!
#6
0!
#7
1!
#8
0!
#9
1!
#10
0!
#11
1!
#12
0!
#13
1!
#14
0!
#15
1!
#16
0!
#17
1!
#18
0!
#19
1!
#20
0!
